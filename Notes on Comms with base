Base unit needs a TS string which contains the list of serial numbers for the base to listen to. After decoding this stirng I have determined the following:

the ts string is a base64 encoded string, decode it to hex and split the string where ff appears, this denotes a legacy sensor
reverse the string and decode each octet of the 6 digit serial number in pairs from hex to decimal, like this:
444c39ff ff 39 4c 44 = 57.76.68
3c4c39ff ff 39 4c 3c = 57.76.60
3d4c39ff ff 39 4c 3d = 57.76.61
484739ff ff 39 47 84 = 57.71.72
474739ff ff 39 47 47 = 57.71.71
454c39ff ff 39 4c 45 = 57.76.69
434c39ff ff 39 4c 43 = 57.76.67
3e4c39ff ff 39 4c 3e = 57.76.62


Updated Process for Creating a ts String

    Identify Serial Number Components:
        For a legacy serial, format it as FF XX YY ZZ where:
            FF is the prefix indicating it’s a legacy sensor.
            XX, YY, ZZ are the segments of the serial number in hexadecimal.

    Convert Each Segment to Hexadecimal:
        Given a serial number like 57.76.68:
            FF is fixed as the legacy identifier.
            57, 76, 68 are converted directly to hexadecimal.

    Concatenate the Segments:
        Each serial number becomes a 4-byte segment (e.g., 68 76 57 FF for 57.76.68 when reversed).

    Base64 Encode the Full Sequence:
        After constructing the hex sequence, convert it to binary and encode as Base64.

JavaScript Code for Correctly Creating the ts String

const Buffer = require('buffer').Buffer;

function createTsString(serials) {
    const hexSegments = serials.map(serial => {
        // Split the serial number "57.76.68" into parts
        const [part1, part2, part3] = serial.split('.');

        // Convert to hexadecimal format
        const hexPrefix = "ff"; // Legacy prefix
        const hexPart1 = parseInt(part1).toString(16).padStart(2, '0'); // Convert 57 to hex
        const hexPart2 = parseInt(part2).toString(16).padStart(2, '0'); // Convert 76 to hex
        const hexPart3 = parseInt(part3).toString(16).padStart(2, '0'); // Convert 68 to hex

        // Construct the 4-byte hex segment in the correct order
        return hexPart3 + hexPart2 + hexPart1 + hexPrefix;
    });

    // Concatenate all hex segments and convert to binary
    const binaryData = Buffer.from(hexSegments.join(''), 'hex');

    // Base64 encode to create the ts string
    return binaryData.toString('base64');
}

// Example usage with multiple serial numbers
const serialNumbers = ["57.76.68", "57.76.60", "57.76.61"];
const tsString = createTsString(serialNumbers);
console.log("Generated ts string:", tsString);

Explanation of Changes

    Hex Segments Order: Each serial’s components (XX, YY, ZZ) are appended with FF without replacing the first segment.
    Final Concatenation: All serials are concatenated, converted to binary, and then Base64 encoded to form the final ts string.

This will generate a correct ts string for any list of legacy serial numbers. Let me know if further adjustments are needed!
