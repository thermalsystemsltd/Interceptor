Base unit needs a TS string which contains the list of serial numbers for the base to listen to. After decoding this stirng I have determined the following:

the ts string is a base64 encoded string, decode it to hex and split the string where ff appears, this denotes a legacy sensor
reverse the string and decode each octet of the 6 digit serial number in pairs from hex to decimal, like this:
444c39ff ff 39 4c 44 = 57.76.68
3c4c39ff ff 39 4c 3c = 57.76.60
3d4c39ff ff 39 4c 3d = 57.76.61
484739ff ff 39 47 84 = 57.71.72
474739ff ff 39 47 47 = 57.71.71
454c39ff ff 39 4c 45 = 57.76.69
434c39ff ff 39 4c 43 = 57.76.67
3e4c39ff ff 39 4c 3e = 57.76.62





To dynamically create a ts string from any given serial number in the format you’ve specified, here’s the step-by-step process:
Steps to Create a ts String

    Serial Number Format: Given a serial number like 57.76.68, split it into the respective parts:
        57 denotes the legacy prefix in decimal (which becomes FF in hexadecimal).
        76, 68, etc., are the decimal parts for each segment of the serial.

    Hex Conversion:
        Convert each part of the serial number from decimal to hexadecimal:
            57.76.68 becomes FF 4C 44.
            Note: 57 is always converted to FF for legacy sensors.

    Concatenate Segments:
        Construct each 4-byte segment for the serial number.
        For 57.76.68, concatenate 44 4C 39 FF.

    Encode to Base64:
        After constructing the hex sequence for all serial numbers, convert the entire sequence to binary.
        Base64 encode this binary data to get the ts string.

JavaScript Code for Dynamically Creating a ts String

Here’s a JavaScript code snippet to create the ts string:

const Buffer = require('buffer').Buffer;

function createTsString(serials) {
    const hexSegments = serials.map(serial => {
        // Split the serial like "57.76.68" into parts
        const [legacy, part1, part2] = serial.split('.');

        // Convert to hexadecimal format
        const hexPrefix = "ff"; // Legacy prefix for 57
        const hexPart1 = parseInt(part1).toString(16).padStart(2, '0'); // Convert 76 to hex
        const hexPart2 = parseInt(part2).toString(16).padStart(2, '0'); // Convert 68 to hex

        // Construct the 4-byte hex segment (reversed for each serial part)
        return hexPart2 + hexPart1 + hexPrefix;
    });

    // Concatenate all hex segments and convert to binary
    const binaryData = Buffer.from(hexSegments.join(''), 'hex');

    // Base64 encode to create the ts string
    return binaryData.toString('base64');
}

// Example usage with multiple serial numbers
const serialNumbers = ["57.76.68", "57.76.60", "57.76.61"];
const tsString = createTsString(serialNumbers);
console.log("Generated ts string:", tsString);

Explanation of the Code

    Hex Conversion: The parseInt with toString(16) converts each decimal segment to hexadecimal.
    Padding: Each segment is padded to 2 digits for consistency.
    Binary Conversion: The concatenated hex segments are converted to binary.
    Base64 Encoding: The binary data is encoded as Base64 to create the final ts string.
